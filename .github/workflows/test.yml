name: Test this action
on:
  pull_request:
  push:
    branches-ignore:
    - v1
    tags-ignore:
    - '*'
    paths-ignore:
    - README.md
  workflow_dispatch:
permissions:
  contents: read

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04, ubuntu-22.04, macos-11, macos-12, macos-13, windows-2019, windows-2022 ]
        ruby: [
          '3.2',
          system
        ]

    name: ${{ matrix.os }} ${{ matrix.ruby }}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4

    - uses: ./
      id: setup-ruby
      with:
        ruby-version: ${{ matrix.ruby }}
        bundler-cache: true
    - run: ruby -v
    - name: PATH
      shell: pwsh
      run: |
        # Show PATH with Powershell
        $f, $r = $env:PATH.split([IO.Path]::PathSeparator); $r
    - name: Ruby prefix output
      run: echo "${{ steps.setup-ruby.outputs.ruby-prefix }}"

    - name: build compiler
      run: |
        ruby -e "puts 'build compiler: ' + RbConfig::CONFIG.fetch('CC_VERSION_MESSAGE', 'unknown').lines.first"
    - name: gcc and ridk version (mingw)
      if: startsWith(matrix.os, 'windows')
      run: |
        $abi, $plat = $(ruby -e "STDOUT.write RbConfig::CONFIG['ruby_version'] + ' ' + RUBY_PLATFORM").split(' ')
        if ($plat.Contains('mingw')) {
          gcc --version
          if ($abi -ge '2.4') {
            ridk version
          } else {
            echo 'ridk is unavailable'
          }
        } elseif ($plat.Contains('mswin')) {
          &"$env:VCPKG_INSTALLATION_ROOT\vcpkg" list
        }
    - name: RbConfig::CONFIG
      run: ruby -rrbconfig -rpp -e 'pp RbConfig::CONFIG'
    - name: RbConfig::MAKEFILE_CONFIG
      run: ruby -rrbconfig -rpp -e 'pp RbConfig::MAKEFILE_CONFIG'

    - name: Subprocess test
      run: ruby test_subprocess.rb
    - name: OpenSSL compiled version
      run: ruby -ropenssl -e 'puts OpenSSL::OPENSSL_VERSION'
    - name: OpenSSL loaded version
      run: ruby -ropenssl -e 'puts OpenSSL::OPENSSL_LIBRARY_VERSION'
      if: matrix.ruby != '1.9'
    - name: OpenSSL test
      run: ruby -ropen-uri -e 'puts URI.send(:open, %{https://rubygems.org/}) { |f| f.read(1024) }'

    - run: gem env
    - name: C extension test
      if: matrix.ruby != 'system'
      run: gem install json -v 2.2.0
    - run: bundle --version
    # This step is redundant with `bundler-cache: true` but is there to check a redundant `bundle install` still works
    - run: bundle install
    - run: bundle exec rake --version
    - run: bundle exec rake

    # Ensure the same bundle commands work in bash on Windows
    - name: bundle install (bash)
      run: bundle install
      shell: bash
      if: startsWith(matrix.os, 'windows')
    - name: bundle exec rake --version (bash)
      run: bundle exec rake --version
      shell: bash
      if: startsWith(matrix.os, 'windows')
    - name: bundle exec rake (bash)
      run: bundle exec rake
      shell: bash
      if: startsWith(matrix.os, 'windows')

    - name: Test `gem github:` in a Gemfile
      if: matrix.ruby != 'system' || !startsWith(matrix.os, 'ubuntu')
      run: bundle install
      env:
        BUNDLE_GEMFILE: ${{ github.workspace }}/gemfiles/gem_from_github.gemfile

    - name: which ruby, bundle
      shell: bash
      run: which -a ruby bundle
    - name: which rake
      run: which -a rake
      if: "!startsWith(matrix.os, 'windows')"
    - name: where ruby, rake, bundle
      if: startsWith(matrix.os, 'windows')
      run: |
        $ErrorActionPreference = 'Continue'
        $where = 'ruby', 'rake', 'bundle'
        foreach ($e in $where) {
          $rslt = where.exe $e 2>&1 | Out-String
          if ($rslt.contains($e)) { echo $rslt.Trim() }
          else { echo "Can't find $e" }
          echo ''
        }
    - name: bash test
      shell: bash
      run: echo ~ && bundle install
    - name: Windows JRuby
      if: startsWith(matrix.os, 'windows') && startsWith(matrix.ruby, 'jruby')
      run: gem install sassc

  lint:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v4
    - run: yarn install
    - run: yarn run package
    - name: Check generated files are up to date
      run: git diff --exit-code
